#+Author: ggmon
#+STARTUP: overview
#+STARTUP: hidestars


* Autotools Tutorials for Beginners

** Compile programs with auto tools

./configure
make
make install


** Parts of the auto tools

Autoconf - This is used to generate  the "configure" shell
script. This is the script that analyses your system at runtime 

Automake - This is used to generate the Makefiles. It uses information
provided by autoconf

Libtool - This is used to create shared libraries, platform
independently


** Version differences.

Autotools can behave quite differently form version to version

$autoscan --version


** Adding Auto conf 

We will add autoconf to a helloworld.c with a makefile.

First we create a file called configure.ac. This file instructs
Autoconf how to generate the "configure" script.

Creating this file by hand can be tedious so we use a program called
"autoscan"

$ autoscan
$ ls
Makefile  autoscan.log  configure.scan  hello*  hello.c
$

rename configure.scan to configure.ac.

The reason autoscan does not generate configure.ac directly is because
autoscn does not want to overwrite your configure.ac file.

Anyway, now you can run “autoconf” to generate “configure”:

$ autoconf
$ ls
Makefile         autoscan.log  configure.ac  hello.c
autom4te.cache/  configure*    hello*
$


Ignore all those extra files Autoconf creates. They are just
intermediary files we don't need. Don't erase them, though — Autoconf
may use them later.


We could now type “./configure”, but not yet: “configure” is supposed
to generate a new Makefile. But “configure” uses a file called
“Makefile.in” to generate the new Makefile. So now we need a
“Makefile.in”.


No sweat. “Makefile.in” is supposed to be a template for the new
“Makefile”. We'll simply rename “Makefile”(the normal make file) to
“Makefile.in” and worry about writing the proper version later:

$ mv Makefile Makefile.in
$ ls
Makefile.in      autoscan.log  configure.ac  hello.c
autom4te.cache/  configure*    hello*
$


Now we're ready to run “./configure” and “make”:



Hey~ you did it! You've written your first Autoconf program!

Well, sort of…

You see, all you've done so far is making the program look like it's
using Autoconf. In actuality, your program isn't any more portable
than it was before. To do that, you'll need to customize your source
files




** "Config.h" has portablity constants

To make the program portable, we'll need to modify our sourcefile,
"hello.c". Our source file will need #ifdef, #ifndef, etc to be
portable

But we cant use #ifdef, #ifndef unless we have some constants to
check. We it turns out the constants we need are in "config.h". So
we'll simply #include config.h

"config.h" is generated by Autoconf and we need to tell autoconf to
generate one. This is actually quite simple just run authoheader
followed by ./configure

Notice how “autoheader” generates “config.h.in”, then “config.h.in”
was used by “configure” to generate “config.h”? In general, that's how
Autoconf works: You'll use some program to generate “<something>.in”,
and “<something>.in” will be used by Autoconf to generate
“<something>”.



** References
http://markuskimius.wikidot.com/programming:tut:autotools:1
