* Understanding Ruby Blocks, Procs and Lambdas

Ruby has four different ways of using closures. each of which is a tad
bit different.


** Blocks

 array = [ 1, 2, 3, 4]
 
 array.collect! do |n|
    n ** 2
 end

 puts array.inspect

#=>[1,4,9,16]

now making our own collect! method


class Array 
  def iterate!
    self.each_with_index do | n , i|
      self[i] = yield(n)
    end
  end
end 


array = [ 1, 2, 3, 4]

array.iterate! do |n|
  n ** 2
end


unlike attributes, you do not need to specify the name of blocks
within your methods. Instead you can use the yield keyword.


** Procs

class Array
  def iterate!(&code)
     self.each_with_index do |n,1|
       self[i] = code.call(n)
     end
  end
end

array = [1,2,3,4]

array.iterate! do |n|
  n ** 2
end


puts array.inspect

# => [1,4,9,16]



The difference in procs is we are passing ampersand argument called
code. This argument is convieniently enough, our block of code/



** blocks and procs

def what_am_i(&block)
    block.class
end

puts what_am_i {}

# => proc

A block is just a proc! That being said, what is a Proc?


** Procedures, AKA, Procs

Blocks are very handy and syntatically simples, however we many want
to have many different blocks at our disposal and use them mutliple
times. As such, passing the same block again and again would require
us to repeat ourself. This reusable code is called a Proc

class Array
  def iterate!(code)
    self.each_with_index do |n, i|
      self[i] = code.call(n)
    end
  end
end
 
array_1 = [1, 2, 3, 4]
array_2 = [2, 3, 4, 5]
 
square = Proc.new do |n|
  n ** 2
end
 
array_1.iterate!(square)
array_2.iterate!(square)
 
puts array_1.inspect
puts array_2.inspect
 
# => [1, 4, 9, 16]
# => [4, 9, 16, 25]



Notice how we do not prepend an ampersand to the code attribute in our
“iterate!” method. This is because passing Procs is no different
then passing any other data typeNotice how we do not prepend an
ampersand to the code attribute in our “iterate!” method. This is
because passing Procs is no different then passing any other data type


What if we want to pass two or more closures to a method. If this is
the case, blocks quickly become too limiting, by having procs however
we can do something like this

def callbacks(procs)
    procs[:starting].call
    puts "Still going"
    procs[:finishing].call
end

callbacks (:starting => Proc.new{puts "Strating"},
          :finishing => Proc.new{puts "Finishing"})

#=> Starting
#=> Still going
#=> Finishing

- Block: Your method is breaking an object down into smaller pieces,
  and you want to let your users interact with these pieces.
  
- Block: You want to run multiple expressions atomically, like a
  database migration.

- Proc: You want to reuse a block of code multiple times.
- Proc: Your method will have one or more callbacks.




** References

http://www.robertsosinski.com/2008/12/21/understanding-ruby-blocks-procs-and-lambdas/

